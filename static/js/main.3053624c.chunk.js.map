{"version":3,"sources":["math-utils.js"," components/PlayNumber.js"," components/PlayAgain.js"," components/PlayAudio.js"," components/Game.js","App.js","serviceWorker.js","index.js"],"names":["utils","range","start","stop","step","Array","from","length","_","i","random","min","max","Math","floor","shuffle","arr","j","PlayNumber","props","className","status","onClick","number","PlayAgain","PlayAudio","React","forwardRef","ref","autoPlay","preload","data-seq","seqState","onEnded","src","process","type","Game","useState","splice","playNumbers","availableNumbers","setAvailableNumbers","currentNumber","setCurrentNumber","audioRef","createRef","audioState","setAudioState","setGameState","newAvailableNumbers","setSeqState","useGameState","numberStatus","includes","onNumberClick","currentStatus","filter","n","delay","setTimeout","clearTimeout","seqArr","current","getAttribute","split","startNewGame","map","key","NumberMatch","gameId","setGameId","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8NAYeA,EAZD,CACVC,MAAQ,SAACC,EAAOC,EAAMC,GAAd,OAAuBC,MAAMC,KAAK,CAAEC,QAASJ,EAAOD,GAASE,EAAO,IAAI,SAACI,EAAGC,GAAJ,OAAUP,EAASO,EAAIL,MACvGM,OAAQ,SAACC,EAAKC,GAAN,OAAcD,EAAME,KAAKC,MAAMD,KAAKH,UAAYE,EAAMD,EAAM,KACpEI,QAAS,SAACC,GACR,IAAK,IAAIP,EAAIO,EAAIT,OAAS,EAAGE,EAAI,EAAGA,IAAK,CACvC,IAAIQ,EAAIJ,KAAKC,MAAMD,KAAKH,SAAWD,EAAI,GADA,EAEpB,CAACO,EAAIC,GAAID,EAAIP,IAA/BO,EAAIP,GAFkC,KAE9BO,EAAIC,GAF0B,KAIzC,OAAOD,ICAEE,EANI,SAAAC,GAAK,OACpB,4BAAQC,UAAS,mBAAcD,EAAME,QAAWC,QAAW,kBAAMH,EAAMG,QAAQH,EAAMI,OAAQJ,EAAME,UAC/F,8BAAOF,EAAMI,UCENC,EAJG,SAAAL,GAAK,OACnB,4BAAQG,QAASH,EAAMG,SAAvB,eCGWG,EAJGC,IAAMC,YAAW,SAACR,EAAOS,GAAR,OAC/B,2BAAOC,UAAQ,EAACC,QAAQ,OAAOC,WAAUZ,EAAMa,SAAUC,QAAS,kBAAMd,EAAMc,QAAQd,IAASe,IAAG,UAAKC,GAAL,wBAA2ChB,EAAMe,KAAON,IAAKA,EAAKQ,KAAK,iBCmH9JC,EA5FA,SAAAlB,GAAU,IAAD,EAlBH,WAAO,IAAD,EAEDmB,mBAAStC,EAAMe,QAAQf,EAAMC,MAAM,EAAG,GAAI,IAAIsC,OAAO,EAAG,IAAvEC,EAFgB,sBAGyBF,mBAAStC,EAAMe,QAAN,YAAkByB,KAHpD,mBAGhBC,EAHgB,KAGEC,EAHF,OAImBJ,mBAASG,EAAiB,IAJ7C,mBAIhBE,EAJgB,KAIDC,EAJC,KAWjBC,EAAWnB,IAAMoB,YAXA,EAYaR,mBAAS,+CAZtB,mBAYhBS,EAZgB,KAYJC,EAZI,OAaSV,mBAAS,CAAC,+CAAD,sFAA+HK,EAA/H,UAblB,mBAevB,MAAO,CAAEF,mBAAkBD,cAAaG,gBAAeM,aATlC,SAACC,GACpBR,EAAoBQ,GACpBN,EAAiBM,EAAoB,KAO8BL,WAAUE,aAAYf,SAfpE,KAe8EmB,YAf9E,KAe2FH,iBAe9GI,GATFX,EAHkB,EAGlBA,iBACAD,EAJkB,EAIlBA,YACAG,EALkB,EAKlBA,cACAM,EANkB,EAMlBA,aACAJ,EAPkB,EAOlBA,SACAE,EARkB,EAQlBA,WACAf,EATkB,EASlBA,SACAmB,EAVkB,EAUlBA,YACAH,EAXkB,EAWlBA,cAGIK,EAAe,SAAA9B,GACnB,OAAKkB,EAAiBa,SAAS/B,GAGxB,YAFE,QAkBLgC,EAAgB,SAAChC,EAAQiC,GAE7B,GAAsB,SAAlBA,EAIJ,GAAIb,IAAkBpB,EAAQ,CAC5B,IAAM2B,EAAsBT,EAAiBgB,QAAO,SAAAC,GAAC,OAAIA,IAAMf,KAE/DK,EAAc,eACVE,EAAoB3C,OAAS,EAC/B4C,EAAY,CAAC,iBAAD,qFAAiGD,EAAoB,GAArH,UAGZC,EAAY,CAAC,iBAAD,iHAEd,IAAMQ,EAAQC,YAAY,WACxBX,EAAaC,GACbW,aAAaF,KACZ,WAGHX,EAAc,eACdG,EAAY,CAAC,0BAAD,mBAAwC5B,EAAxC,QAAsD,+BAAtD,mBAAkGoB,EAAlG,WAIhB,OAEE,yBAAKvB,UAAU,sBAEb,kBAAC,EAAD,CACEa,QA7CU,SAAAd,GAEd,IAAM2C,EAASjB,EAASkB,QAAQC,aAAa,YAAYC,MAAM,KAE3DH,EAAOvD,OAAS,IAClByC,EAAcc,EAAO,IACrBA,EAAOvB,OAAO,EAAG,GACjBY,EAAYW,KAuCVlC,IAAKiB,EACLX,IAAKa,EACLf,SAAUA,IAEiB,IAA5BS,EAAiBlC,OAChB,kBAAC,EAAD,CAAWe,QAASH,EAAM+C,eAE1B,GAIF,yBAAK9C,UAAU,kBACZoB,EAAY2B,KAAI,SAAA5C,GAAM,OACrB,kBAAC,EAAD,CACE6C,IAAK7C,EACLA,OAAQA,EACRF,OAAQgC,EAAa9B,GACrBD,QAASiC,UCzGjBc,G,MAAc,WAAO,IAAD,EACI/B,mBAAS,GADb,mBACjBgC,EADiB,KACTC,EADS,KAExB,OAAO,kBAAC,EAAD,CAAMH,IAAKE,EAAQJ,aAAgB,kBAAMK,EAAUD,EAAQ,QAQrDE,MALf,WACE,OAAO,kBAAC,EAAD,OCCWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3053624c.chunk.js","sourcesContent":["const utils = {\n    range : (start, stop, step) => Array.from({ length: (stop - start) / step + 1}, (_, i) => start + (i * step)),\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\n    shuffle: (arr) => {\n      for (let i = arr.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * i + 1);\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n      }\n      return arr;\n    }\n};\n\nexport default utils;","import React from 'react';\n\nconst PlayNumber = props => (\n    <button className={`c-number ${props.status}` } onClick = {() => props.onClick(props.number, props.status)}>\n        <span>{props.number}</span>\n    </button>\n);\n\nexport default PlayNumber;","import React from 'react';\n\nconst PlayAgain = props => (\n    <button onClick={props.onClick}>Play Again</button>\n);\n\nexport default PlayAgain;","import React from 'react';\n\nconst PlayAudio = React.forwardRef((props, ref) => (\n    <audio autoPlay preload=\"true\" data-seq={props.seqState} onEnded={() => props.onEnded(props) } src={`${process.env.PUBLIC_URL}/assets/audio${props.src}`} ref={ref} type=\"audio/ogg\"></audio>\n));\n\nexport default PlayAudio;","import React, { useState } from 'react';\n\nimport utils from '../math-utils';\n\nimport PlayNumber from './PlayNumber';\nimport PlayAgain from './PlayAgain';\nimport PlayAudio from './PlayAudio';\n\nconst useGameState = () => {\n\n    const [playNumbers] = useState(utils.shuffle(utils.range(0, 20, 1)).splice(9, 9));\n    const [availableNumbers, setAvailableNumbers] = useState(utils.shuffle([...playNumbers]));\n    const [currentNumber, setCurrentNumber] = useState(availableNumbers[0]);\n    \n    const setGameState = (newAvailableNumbers) => {\n      setAvailableNumbers(newAvailableNumbers);\n      setCurrentNumber(newAvailableNumbers[0]);\n    };\n  \n    const audioRef = React.createRef();\n    const [audioState, setAudioState] = useState('/floyd_and_roly_need_your_help_to_knock.ogg');\n    const [seqState, setSeqState] = useState([`/prompts/for_this_job_youll_need_to_find.ogg`,`/prompts/numbers.ogg`,`/ready.ogg`,`/prompts/find_the_number.ogg`,`/numbers/${currentNumber}.ogg`]);\n    \n    return { availableNumbers, playNumbers, currentNumber, setGameState, audioRef, audioState, seqState, setSeqState, setAudioState};\n  };\n  \n  const Game = props => {\n    \n    const {\n      availableNumbers, \n      playNumbers, \n      currentNumber, \n      setGameState,\n      audioRef,\n      audioState, \n      seqState,\n      setSeqState,\n      setAudioState\n    } = useGameState();\n  \n    const numberStatus = number => {\n      if (!availableNumbers.includes(number)) {\n        return 'used';\n      }\n      return 'available';\n    }\n  \n    const onEnded = props => {\n      \n      const seqArr = audioRef.current.getAttribute('data-seq').split(',');\n      \n      if (seqArr.length > 0 ) { \n        setAudioState(seqArr[0]);\n        seqArr.splice(0, 1);\n        setSeqState(seqArr);\n      } else {\n  \n      }\n    }\n  \n    const onNumberClick = (number, currentStatus) => {\n      \n      if (currentStatus === 'used') {\n        return;\n      }\n      \n      if (currentNumber === number) {\n        const newAvailableNumbers = availableNumbers.filter(n => n !== currentNumber);\n        \n        setAudioState(`/sfx/ca.ogg`);\n        if (newAvailableNumbers.length > 0) {\n          setSeqState([`/sfx/lever.ogg`,`/sfx/airup.ogg`,`/sfx/punch2.ogg`,`/prompts/find_the_number.ogg`, `/numbers/${newAvailableNumbers[0]}.ogg`]);\n        } else {\n          // game won\n          setSeqState([`/sfx/lever.ogg`,`/sfx/airup.ogg`,`/sfx/punch2.ogg`, `/building_collapse.ogg`, `/that_building_is_outta_here.ogg`, `/sfx/tada.ogg`]);\n        }\n        const delay = setTimeout( () => {\n          setGameState(newAvailableNumbers);\n          clearTimeout(delay);\n        }, 2600);\n        \n      } else {\n        setAudioState('/sfx/wa.ogg');\n        setSeqState(['/prompts/oops_thats.ogg', `/numbers/${number}.ogg`, '/prompts/find_the_number.ogg', `/numbers/${currentNumber}.ogg`]);\n      }\n    }\n  \n    return (\n      \n      <div className=\"c-number-container\">\n        {/* <img src={DemolitionBingo_BuildingTop}/>   */}\n        <PlayAudio \n          onEnded={onEnded} \n          ref={audioRef} \n          src={audioState} \n          seqState={seqState}\n        /> \n        {availableNumbers.length === 0 ? (\n          <PlayAgain onClick={props.startNewGame}/>\n        ) : (\n          ''\n        )}\n  \n        \n        <div className=\"o-numbers-grid\">\n          {playNumbers.map(number => \n            <PlayNumber\n              key={number}\n              number={number}\n              status={numberStatus(number)}\n              onClick={onNumberClick}\n            />\n          )}\n        </div>\n      </div>\n    );\n  };\n\nexport default Game;","// eslint-disable-next-line\nimport React, {useState} from 'react';\nimport Game from './ components/Game';\nimport './App.css';\n\nconst NumberMatch = () => {\n  const [gameId, setGameId] = useState(1);\n  return <Game key={gameId} startNewGame = {() => setGameId(gameId +1)}/>\n};\n\nfunction App() {\n  return <NumberMatch/>\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}